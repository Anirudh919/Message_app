{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction ReminderFormComponent_p_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.successMessage);\n  }\n}\nfunction ReminderFormComponent_p_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nexport class ReminderFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.successMessage = '';\n    this.errorMessage = '';\n    this.reminderForm = this.fb.group({\n      date: ['', Validators.required],\n      time: ['', Validators.required],\n      message: ['', Validators.required],\n      method: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.reminderForm.valid) {\n      this.http.post('http://localhost:3000/api/reminders', this.reminderForm.value).subscribe({\n        next: () => {\n          this.successMessage = 'Reminder saved successfully!';\n          this.errorMessage = '';\n          this.reminderForm.reset();\n        },\n        error: err => {\n          this.errorMessage = 'Failed to save reminder. Try again.';\n          this.successMessage = '';\n        }\n      });\n    }\n  }\n  static {\n    this.ɵfac = function ReminderFormComponent_Factory(t) {\n      return new (t || ReminderFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ReminderFormComponent,\n      selectors: [[\"app-reminder-form\"]],\n      decls: 26,\n      vars: 4,\n      consts: [[1, \"reminder-form\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"date\", \"formControlName\", \"date\", \"required\", \"\"], [\"type\", \"time\", \"formControlName\", \"time\", \"required\", \"\"], [\"formControlName\", \"message\", \"rows\", \"4\", \"required\", \"\"], [\"formControlName\", \"method\", \"required\", \"\"], [\"value\", \"\"], [\"value\", \"email\"], [\"value\", \"sms\"], [\"type\", \"submit\", 3, \"disabled\"], [\"style\", \"color: green\", 4, \"ngIf\"], [\"style\", \"color: red\", 4, \"ngIf\"], [2, \"color\", \"green\"], [2, \"color\", \"red\"]],\n      template: function ReminderFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Set a Reminder\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function ReminderFormComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"label\");\n          i0.ɵɵtext(5, \"Date:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"input\", 2);\n          i0.ɵɵelementStart(7, \"label\");\n          i0.ɵɵtext(8, \"Time:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 3);\n          i0.ɵɵelementStart(10, \"label\");\n          i0.ɵɵtext(11, \"Message:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"textarea\", 4);\n          i0.ɵɵelementStart(13, \"label\");\n          i0.ɵɵtext(14, \"Method:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"select\", 5)(16, \"option\", 6);\n          i0.ɵɵtext(17, \"-- Select --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"option\", 7);\n          i0.ɵɵtext(19, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"option\", 8);\n          i0.ɵɵtext(21, \"SMS\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"button\", 9);\n          i0.ɵɵtext(23, \"Set Reminder\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(24, ReminderFormComponent_p_24_Template, 2, 1, \"p\", 10);\n          i0.ɵɵtemplate(25, ReminderFormComponent_p_25_Template, 2, 1, \"p\", 11);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.reminderForm);\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"disabled\", ctx.reminderForm.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\".reminder-form[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n  margin: 0 auto;\\n  padding: 20px;\\n}\\n\\n.reminder-form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.reminder-form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .reminder-form[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%], .reminder-form[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], .reminder-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 8px;\\n  margin-top: 4px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVtaW5kZXItZm9ybS9yZW1pbmRlci1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7Ozs7RUFJRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7QUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyIucmVtaW5kZXItZm9ybSB7XG4gIG1heC13aWR0aDogNDAwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAyMHB4O1xufVxuXG4ucmVtaW5kZXItZm9ybSBsYWJlbCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4ucmVtaW5kZXItZm9ybSBpbnB1dCxcbi5yZW1pbmRlci1mb3JtIHRleHRhcmVhLFxuLnJlbWluZGVyLWZvcm0gc2VsZWN0LFxuLnJlbWluZGVyLWZvcm0gYnV0dG9uIHtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDhweDtcbiAgbWFyZ2luLXRvcDogNHB4O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;ICsBjEC,6BAA+C;IAAAA,YAAoB;IAAAA,iBAAI;;;;IAAxBA,eAAoB;IAApBA,2CAAoB;;;;;IACnEA,6BAA2C;IAAAA,YAAkB;IAAAA,iBAAI;;;;IAAtBA,eAAkB;IAAlBA,yCAAkB;;;ADf/D,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,EAAe,EAAUC,IAAgB;IAAzC,OAAE,GAAFD,EAAE;IAAuB,SAAI,GAAJC,IAAI;IAHjD,mBAAc,GAAG,EAAE;IACnB,iBAAY,GAAG,EAAE;IAGf,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAChCC,IAAI,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MAC/BE,OAAO,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ,CAAC;MAClCG,MAAM,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACS,QAAQ;KACjC,CAAC;EACJ;EAEAI,QAAQ;IACN,IAAI,IAAI,CAACP,YAAY,CAACQ,KAAK,EAAE;MAC3B,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,qCAAqC,EAAE,IAAI,CAACT,YAAY,CAACU,KAAK,CAAC,CAC3EC,SAAS,CAAC;QACTC,IAAI,EAAE,MAAK;UACT,IAAI,CAACC,cAAc,GAAG,8BAA8B;UACpD,IAAI,CAACC,YAAY,GAAG,EAAE;UACtB,IAAI,CAACd,YAAY,CAACe,KAAK,EAAE;QAC3B,CAAC;QACDC,KAAK,EAAGC,GAAG,IAAI;UACb,IAAI,CAACH,YAAY,GAAG,qCAAqC;UACzD,IAAI,CAACD,cAAc,GAAG,EAAE;QAC1B;OACD,CAAC;;EAER;;;uBA7BWjB,qBAAqB;IAAA;EAAA;;;YAArBA,qBAAqB;MAAAsB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCTlC3B,8BAA2B;UACrBA,8BAAc;UAAAA,iBAAK;UAEvBA,+BAAyD;UAAxBA;YAAA,OAAY4B,cAAU;UAAA,EAAC;UACtD5B,6BAAO;UAAAA,qBAAK;UAAAA,iBAAQ;UACpBA,2BAAmD;UAEnDA,6BAAO;UAAAA,qBAAK;UAAAA,iBAAQ;UACpBA,2BAAmD;UAEnDA,8BAAO;UAAAA,yBAAQ;UAAAA,iBAAQ;UACvBA,+BAAiE;UAEjEA,8BAAO;UAAAA,wBAAO;UAAAA,iBAAQ;UACtBA,kCAA0C;UACvBA,6BAAY;UAAAA,iBAAS;UACtCA,kCAAsB;UAAAA,sBAAK;UAAAA,iBAAS;UACpCA,kCAAoB;UAAAA,oBAAG;UAAAA,iBAAS;UAGlCA,kCAAwD;UAAAA,6BAAY;UAAAA,iBAAS;UAG/EA,qEAAuE;UACvEA,qEAAiE;UACnEA,iBAAM;;;UAtBEA,eAA0B;UAA1BA,4CAA0B;UAiBRA,gBAAiC;UAAjCA,mDAAiC;UAGhCA,eAAoB;UAApBA,yCAAoB;UACtBA,eAAkB;UAAlBA,uCAAkB","names":["Validators","i0","ReminderFormComponent","constructor","fb","http","reminderForm","group","date","required","time","message","method","onSubmit","valid","post","value","subscribe","next","successMessage","errorMessage","reset","error","err","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/anirudh/Documents/reminder_app/frontend/reminder/src/app/reminder-form/reminder-form.component.ts","/home/anirudh/Documents/reminder_app/frontend/reminder/src/app/reminder-form/reminder-form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-reminder-form',\n  templateUrl: './reminder-form.component.html',\n  styleUrls: ['./reminder-form.component.css']\n})\nexport class ReminderFormComponent {\n reminderForm: FormGroup;\n  successMessage = '';\n  errorMessage = '';\n\n  constructor(private fb: FormBuilder, private http: HttpClient) {\n    this.reminderForm = this.fb.group({\n      date: ['', Validators.required],\n      time: ['', Validators.required],\n      message: ['', Validators.required],\n      method: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.reminderForm.valid) {\n      this.http.post('http://localhost:3000/api/reminders', this.reminderForm.value)\n        .subscribe({\n          next: () => {\n            this.successMessage = 'Reminder saved successfully!';\n            this.errorMessage = '';\n            this.reminderForm.reset();\n          },\n          error: (err) => {\n            this.errorMessage = 'Failed to save reminder. Try again.';\n            this.successMessage = '';\n          }\n        });\n    }\n  }\n}\n","<div class=\"reminder-form\">\n  <h2>Set a Reminder</h2>\n\n  <form [formGroup]=\"reminderForm\" (ngSubmit)=\"onSubmit()\">\n    <label>Date:</label>\n    <input type=\"date\" formControlName=\"date\" required>\n\n    <label>Time:</label>\n    <input type=\"time\" formControlName=\"time\" required>\n\n    <label>Message:</label>\n    <textarea formControlName=\"message\" rows=\"4\" required></textarea>\n\n    <label>Method:</label>\n    <select formControlName=\"method\" required>\n      <option value=\"\">-- Select --</option>\n      <option value=\"email\">Email</option>\n      <option value=\"sms\">SMS</option>\n    </select>\n\n    <button type=\"submit\" [disabled]=\"reminderForm.invalid\">Set Reminder</button>\n  </form>\n\n  <p style=\"color: green\" *ngIf=\"successMessage\">{{ successMessage }}</p>\n  <p style=\"color: red\" *ngIf=\"errorMessage\">{{ errorMessage }}</p>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}